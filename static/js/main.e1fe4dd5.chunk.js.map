{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","contactRef","createRef","className","id","onClick","console","log","style","backgroundColor","current","scrollIntoView","behavior","position","href","ref","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iIAAAA,EAAOC,QAAU,IAA0B,kC,4LC0F5BC,E,YA3Eb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,WAAaC,sBAFD,E,sEAKR,IAAD,OACR,OACE,yBAAKC,UAAU,OACX,yBAAKC,GAAG,OAAOD,UAAU,wBAAzB,qBACoB,wCADpB,2CAEE,yBAAME,QAAS,WAAKC,QAAQC,IAAI,OAAQC,MAAO,CAACC,gBAAiB,SAAjE,WACA,yBAAMJ,QAAS,WAAKC,QAAQC,IAAI,OAAQC,MAAO,CAACC,gBAAiB,YAAjE,gBACA,6BACA,4BACEJ,QAAS,WACPC,QAAQC,IAAI,UACZ,EAAKN,WAAWS,QAAQC,eAAe,CAAEC,SAAU,aAHvD,aAQF,6BACA,yBAAKT,UAAU,SAASK,MAAO,CAACK,SAAU,UAEtC,uBAAGC,KAAK,IAAIX,UAAU,QAAtB,QACA,wBAAIA,UAAU,WAAWC,GAAG,WACxB,4BACI,yBAAKD,UAAU,YAAYE,QAAS,WAAKC,QAAQC,IAAI,QAArD,SAEJ,4BACI,yBAAKJ,UAAU,YAAYE,QAAS,WAAKC,QAAQC,IAAI,QAArD,UAEJ,4BACI,yBAAKJ,UAAU,YAAYE,QAAS,WAAKC,QAAQC,IAAI,QAArD,aAEJ,4BACI,yBAAKJ,UAAU,YAAYE,QAAS,WAAKC,QAAQC,IAAI,QAArD,YAEJ,4BACI,uBAAGO,KAAK,QAAQX,UAAU,aAA1B,YAMd,yBAAKA,UAAU,aAGf,yBAAKC,GAAG,QAAQD,UAAU,wBACtB,6BACI,uCAKR,yBAAKC,GAAG,WAAWD,UAAU,wBACzB,6BACI,yCAKR,yBAAKY,IAAKC,KAAKf,WAAYG,GAAG,UAAUD,UAAU,wBAC9C,6BACI,8CADJ,wD,GAhEMc,IAAMC,WCFJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.e1fe4dd5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { createRef } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport './styles.css';\nimport scrollToComponent from 'react-scroll-to-component';\n\nfunction ScrolToButton(props) {\n  return (\n    <button className=\"square\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.contactRef = createRef();\n  }\n\n  render () {\n    return (\n      <div className=\"App\">\n          <div id=\"home\" className=\"my-border my-section\" >\n            Hello! My name is <b>Kel Zhang</b>. I'm a creative, curious web developer.\n            <div  onClick={()=>{console.log(\"hi\")}} style={{backgroundColor: 'aqua'}} >Hire Me</div>\n            <div  onClick={()=>{console.log(\"hi\")}} style={{backgroundColor: 'magenta'}}>View my work</div>\n            <br />\n            <button\n              onClick={() => {\n                console.log(\"scroll\");\n                this.contactRef.current.scrollIntoView({ behavior: 'smooth' });\n              }}\n            >\n              click me!\n            </button>\n          <br />\n          <nav className=\"navbar\" style={{position: 'fixed'}} >\n\n              <a href=\"#\" className=\"logo\">logo</a>\n              <ul className=\"main-nav\" id=\"js-menu\">\n                  <li>\n                      <div className=\"nav-links\" onClick={()=>{console.log(\"hi\")}}>Home</div>\n                  </li>\n                  <li>\n                      <div className=\"nav-links\" onClick={()=>{console.log(\"hi\")}}>About</div>\n                  </li>\n                  <li>\n                      <div className=\"nav-links\" onClick={()=>{console.log(\"hi\")}}>Projects</div>\n                  </li>\n                  <li>\n                      <div className=\"nav-links\" onClick={()=>{console.log(\"hi\")}}>Contact</div>\n                  </li>\n                  <li>\n                      <a href=\"#blog\" className=\"nav-links\">Blog</a>\n                  </li>\n              </ul>\n          </nav>\n        </div>\n      \n        <div className=\"parallax\"></div>\n        \n        {/* <!-- Resume --> */}\n        <div id=\"about\" className=\"my-border my-section\">\n            <div>\n                <b>Resume</b>\n            </div>\n        </div>\n\n        {/* <!-- Projects --> */}\n        <div id=\"projects\" className=\"my-border my-section\">\n            <div>\n                <b>Projects</b>\n            </div>\n        </div>\n\n        {/* <!-- Contact --> */}\n        <div ref={this.contactRef} id=\"contact\" className=\"my-border my-section\">\n            <div>\n                <b>Connect With Me</b>\n                E-mail: kz53@cornell.edu\n                LinkedIn: \n                Download CV\n            </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}