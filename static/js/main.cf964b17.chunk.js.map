{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js","assets/profile-pic.jpg"],"names":["module","exports","App","props","homeRef","createRef","aboutRef","projectRef","contactRef","e","time","where","eAmt","getBoundingClientRect","top","curTime","window","setTimeout","this","SVS_B","scrollBy","className","ref","id","onClick","SmoothVerticalScrolling","current","style","backgroundColor","src","image01","console","log","position","href","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cf964b17.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { createRef } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport './styles.css';\nimport scrollToComponent from 'react-scroll-to-component';\nimport image01 from './assets/profile-pic.jpg';\n\nfunction ScrolToButton(props) {\n  return (\n    <button className=\"square\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.homeRef = createRef();\n    this.aboutRef = createRef();\n    this.projectRef = createRef();\n    this.contactRef = createRef();\n  }\n\n  SmoothVerticalScrolling(e, time, where) {\n    var eTop = e.getBoundingClientRect().top;\n    var eAmt = eTop / 100;\n    var curTime = 0;\n    while (curTime <= time) {\n      window.setTimeout(this.SVS_B, curTime, eAmt, where);\n      curTime += time / 100;\n    }\n  }\n\n  SVS_B(eAmt, where) {\n    if(where == \"center\" || where == \"\")\n      window.scrollBy(0, eAmt / 2);\n    if (where == \"top\")\n      window.scrollBy(0, eAmt);\n  }\n\n  render () {\n    return (\n      <div className=\"App\">\n        <div  ref={this.homeRef} id=\"home\" className=\"my-border my-section\" >\n          Hello! My name is <b>Kel Zhang</b>. I'm a creative, curious web developer.\n          <div onClick={()=>{this.SmoothVerticalScrolling(this.homeRef.current, 275, \"top\")}} style={{backgroundColor: 'aqua'}} >Hire Me</div>\n          <div onClick={()=>{this.SmoothVerticalScrolling(this.aboutRef.current, 275, \"top\")}} style={{backgroundColor: 'magenta'}}>View my work</div>\n          <br />\n          <img className=\"circular\" src={image01} />\n          <button\n            onClick={() => {\n              console.log(\"scroll\");  \n              // this.contactRef.current.scrollIntoView({ behavior: 'smooth' });\n              this.SmoothVerticalScrolling(this.contactRef.current, 275, \"top\");\n            }}\n          >\n            Cliquez moi SVP!\n          </button>\n          <br />\n          <nav className=\"navbar\" style={{position: 'fixed'}} >\n            <a href=\"#\" className=\"logo\">logo</a>\n            <ul className=\"main-nav\" id=\"js-menu\">\n              <li>\n                <div className=\"nav-links\" onClick={()=>{this.SmoothVerticalScrolling(this.homeRef.current, 275, \"top\")}}>Home</div>\n              </li>\n              <li>\n                <div className=\"nav-links\" onClick={()=>{console.log(this.SmoothVerticalScrolling(this.aboutRef.current, 275, \"top\"))}}>About</div>\n              </li>\n              <li>\n                <div className=\"nav-links\" onClick={()=>{this.SmoothVerticalScrolling(this.projectRef.current, 275, \"top\")}}>Projects</div>\n              </li>\n              <li>\n                <div className=\"nav-links\" onClick={()=>{this.SmoothVerticalScrolling(this.contactRef.current, 275, \"top\")}}>Contact</div>\n              </li>\n              <li>\n                <a href=\"#blog\" className=\"nav-links\">Blog</a>\n              </li>\n            </ul>\n          </nav>\n        </div>\n      \n        <div className=\"parallax\"></div>\n        \n        {/* <!-- Resume --> */}\n        <section ref={this.aboutRef} id=\"about\" className=\"my-border my-section\">\n          <b>Resume</b>\n          <div>\n            <ul>\n              {/* <li>Angular</li>\n              <li>React</li>\n              <li>CSS</li>\n              <li>Semantic HTML</li> */}\n              <li>Fast</li>\n              <li>Responsive</li>\n              <li>Intuitive</li>\n              <li>Dynamic</li>\n            </ul>\n            <h4>Languages</h4>\n            <ul>\n              <li>Python</li>\n              <li>Ruby</li>\n              <li>JavaScript</li>\n              <li>Java</li>\n              <li>HTML</li>\n              <li>CSS</li>\n              <li>C#</li>\n              <li>Objective C</li>\n            </ul>\n            <h4>Technologies/Frameworks</h4>\n            <ul>\n              <li>Ruby on Rails</li>\n              <li>Angular</li>\n              <li>React.js</li>\n              <li>Redux</li>\n              <li>Django</li>\n              <li>Flask</li>\n              <li>Node.js</li>\n              <li>Git</li>\n              <li>GIMP/PhotoShop</li>\n              <li>Bootstrap</li>\n              <li>MSSQL Server</li> \n              <li>Unix/Linux BASH</li>\n              <li>JQuery</li>\n              <li>Cordova</li>\n              <li>AWS</li>      \n            </ul>\n            <h4>Work Experience</h4>\n              <h5>SKF</h5>\n              Jr. Fullstack Developer, Lansdale PA\n              <ul>\n                <li>Created a platform to combine multiple content portals into a single service while ensuring ability to scale and host future applications</li>\n                <li>Worked with Amazon Web Services to build microservices for a serverless architecture</li>\n                <li>Used Angular, Bootstrap, and Material Design to make beautiful, responsive multimedia experiences</li>\n                <li>Designed mockups and favicons in GIMP while ensuring that they conform to identity standards</li>\n                <li>Created data visualizations with vanilla JavaScript animations and D3.js library</li>\n                <li>Created a pipeline for deploying code to Node Lambda environment </li>\n                <li>Tutored and assisted in onboarding of new team members to Angular/Node environment</li>\n              </ul>\n              <h5>Freelance Web Development</h5>\n              Consultant\n              <ul>\n                <li>Developed CRUD web application for a client using PHP (CodeIgniter)</li>\n                <li>Created REST API from scratch within a Lambda environment</li>\n                <li>Rewrote existing code to Angular and improved response times from more than 10 seconds to less than 3\t</li>\n                <li>Built authentication piece that integrates with AWS Cognito and Microsoft Active Directory to provide secure login functionality</li>\n              </ul>\n              <h5>Frontage Laboratories</h5>\n              Intern\n              <ul>\n                <li>Developed multiple Python apps for researchers to pipeline data to databases</li>\n                <li>Redesigned parts of the company website to improve UI/UX and used appJar Python framework to create user friendly GUIs </li>\n                <li>Optimized SQL queries to significantly improve database response time</li>\n              </ul>\n            <h4>Projects</h4>\n          </div>      \n        </section>\n\n        {/* <!-- Projects --> */}\n        <section ref={this.projectRef} id=\"projects\" className=\"my-border my-section\">\n            <div>\n                <b>Projects</b>\n            </div>\n        </section>\n\n        {/* <!-- Contact --> */}\n        <section ref={this.contactRef} id=\"contact\" className=\"my-border my-section\">\n          <div>\n              <p><strong>Connect With Me</strong></p>\n              E-mail: kz53@cornell.edu\n              LinkedIn: \n              Download CV\n          </div>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/profile-pic.2248ebee.jpg\";"],"sourceRoot":""}